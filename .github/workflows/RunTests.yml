name: Run Tests

on:
  workflow_dispatch:
  push:

jobs:
  discover_tests: # Identify any microservices that have an associated test suite
    name: Discover Tests
    runs-on: ubuntu-latest

    outputs:
      generic_services: ${{ steps.find_services.outputs.generic_services }}
      docker_services: ${{ steps.find_services.outputs.docker_services }}

    steps:
      - uses: actions/checkout@v2
        name: Checkout repositotory

      - id: find_services
        name: Find testable microservices
        run: |
          # Find any microservices with a 'tests' directory
          function find_testable_services() {
            for dir in broker/*/*/; do
              if [ -f "$dir/Dockerfile" ]; then
                is_dockerized=true
              else
                is_dockerized=false
              fi
          
              if [ -d "$dir/tests" ] && [ $1 = $is_dockerized ]; then
                echo $dir
              fi
            done
          }
          
          # Convert function output into a JSON array parsable by GitHub Actions
          generic_services=$(find_testable_services false | jq -cnR '[inputs | select(length>0)]')
          echo "::set-output name=generic_services::generic_services"
          
          docker_services=$(find_testable_services true | jq -cnR '[inputs | select(length>0)]')
          echo "::set-output name=docker_services::docker_services"

  run_generic_tests:
    name: Test Generic Services
    needs: discover_tests
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        service_dir: ${{ fromJson(needs.discover_tests.outputs.generic_services) }}

    defaults:
      run:
        working-directory: ${{ matrix.service_dir }}

    steps:
      - uses: actions/checkout@v2
        name: Checkout repository

      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip
          
          cache_dir=$(pip cache dir)
          service_name=$(basename -- ${{ matrix.service_dir }})
          cache_key=${{ runner.os }}-$service_name-pip-${{ hashFiles('requirements.txt') }}
          
          echo "::set-output name=dir::$cache_dir"
          echo "::set-output name=key::$cache_key"

      - name: Cache Python packages
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ steps.pip-cache.outputs.key }}

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install package requirements
        run: pip install -r requirements.txt

      - name: Install testing requirements
        run: pip install coverage

      - name: Run tests with coverage
        run: |
          coverage run -m unittest
          
          service_name=$(basename -- ${{ matrix.service_dir }})
          coverage xml -o report_${{ matrix.python-version }}.xml
          coverage report

      - uses: actions/upload-artifact@v3
        with:
          path: ./*.xml

      # Report test coverage for the current set of tests
      - name: Report partial coverage results
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial -l Python -r report_${{ matrix.python-version }}.xml
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  # Tell codacy we are done reporting test coverage
  codacy-coverage-reporter:
    name: Report code coverage
    runs-on: [ self-hosted ]
    needs: run_tests
    steps:
      - name: Finish reporting coverage
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) final
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

