# Adapted from
# https://cloud.google.com/workflows/docs/reference/googleapis/compute/Overview
#
# Create the Consumer VM from the pre-built instance template
# Expected successful output: "SUCCESS"


main:
  # pass runtime args as a JSON string with key/value pairs for "SURVEY", "TESTID", "GOOGLE_CLOUD_PROJECT"
  params: [ARGS]
  steps:
  - init:
      assign:
      - project: ${ARGS.GOOGLE_CLOUD_PROJECT}
      - zone: "us-central1-a"
      - instance: ${ARGS.SURVEY + "-consumer" + ARGS.TESTID}
      # - sourceInstanceTemplate: ${"gcr.io/" + ARGS.GOOGLE_CLOUD_PROJECT + "/kafka_pubsub_connector
      - sourceInstanceTemplate: "https://www.googleapis.com/compute/v1/projects/ardent-cycling-243415/global/instanceTemplates/kafka-pubsub-connector"
      - machineType: "g1-small"
      # - machineType: "e2-standard-2"
  - insert_machine:
      call: googleapis.compute.v1.instances.insert
      args:
        project: ${project}
        zone: ${zone}
        sourceInstanceTemplate: ${sourceInstanceTemplate}
        body:
          name: ${instance}
          # machineType: ${"zones/" + zone + "/machineTypes/" + machineType}
          # disks:
          # - initializeParams:
          #     sourceImage: "projects/debian-cloud/global/images/debian-10-buster-v20201216"
          #   boot: true
          #   autoDelete: true
          networkInterfaces:
          - network: "global/networks/default"
  - start_machine:
      call: googleapis.compute.v1.instances.start
      args:
        instance: ${instance}
        project: ${project}
        zone: ${zone}
  - assert_running:
      call: assert_machine_status
      args:
        expected_status: "RUNNING"
        project: ${project}
        zone: ${zone}
        instance: ${instance}
  # - stop_machine:
  #     call: googleapis.compute.v1.instances.stop
  #     args:
  #       instance: ${instance}
  #       project: ${project}
  #       zone: ${zone}
  # - assert_terminated:
  #     call: assert_machine_status
  #     args:
  #       expected_status: "TERMINATED"
  #       project: ${project}
  #       zone: ${zone}
  #       instance: ${instance}
  # - delete_machine:
  #     call: googleapis.compute.v1.instances.delete
  #     args:
  #       instance: ${instance}
  #       project: ${project}
  #       zone: ${zone}
  - the_end:
      return: "SUCCESS"

assert_machine_status:
  params: [expected_status, project, zone, instance]
  steps:
  - get_instance:
      call: googleapis.compute.v1.instances.get
      args:
        instance: ${instance}
        project: ${project}
        zone: ${zone}
      result: instance
  - compare:
      switch:
      - condition: ${instance.status == expected_status}
        next: end
  - fail:
      raise: ${"Expected VM status is " + expected_status + ". Got " + instance.status + " instead."}
